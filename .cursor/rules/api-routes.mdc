---
description: Guidelines for creating consistent API routes in the application
globs: src/app/api/**/*.ts
alwaysApply: false
---
# API Routes Guidelines

This document outlines the standards and patterns for creating API routes in our application.


## How to use in Cursor AI

To get help on API route development in Cursor, reference this rule by with `@api-route.mdc`. For example:
```
@api-routes Create an api endpoint to create and update NEW_DB_OBJECTS, an endpoint to get the total count, and add a route to handle search, pagination, and filtering.
```

## Route Structure and Organization

- Organize routes under `src/app/api/` using Next.js App Router pattern
- Use `route.ts` for base endpoints (e.g., `/api/websites`)
- Use dynamic segments with `[param]` for parameterized routes (e.g., `/api/websites/[id]/route.ts`)
- Group related functionality in subdirectories (e.g., `/api/websites/stats/`)

## Route Creation

Always use the `createRoute` utility to define handlers:

```typescript
// Import required dependencies
import { createRoute } from "@/lib/api-utils"
import { getCloudflareContext } from "@opennextjs/cloudflare"
import { NextResponse } from "next/server"
import * as HttpStatusCodes from "stoker/http-status-codes"
import * as HttpStatusPhrases from "stoker/http-status-phrases"

export const GET = createRoute
  .params(paramsSchema)  // Optional
  .query(querySchema)    // Optional
  .body(bodySchema)      // Optional
  .handler(async (request, context) => {
    // Implementation
    return NextResponse.json(data)
  })
```

## Schema Validation

- Always validate incoming data using Zod schemas
- Create reusable schemas in `src/lib/route-schemas.ts` when applicable
- Use data model schemas from `src/db/zod-schema.ts` for database operations
- Examples:

```typescript
// For URL parameters
.params(idStringParamsSchema)

// For query parameters
.query(paginationQuerySchema().extend({
  customParam: z.string().optional()
}))

// For request body
.body(websitesInsertDTOSchema)
```

## Cloudflare Context

- Access Cloudflare bindings using `getCloudflareContext()`:

```typescript
const { env } = getCloudflareContext()
```

- Use for accessing:
  - Database: `env.DB`
  - Durable Objects: `env.MONITOR_TRIGGER_RPC`
  - Other Cloudflare resources

## Database Operations

- Use Drizzle ORM for all database operations
- Get database connection using `useDrizzle`:

```typescript
const db = useDrizzle(env.DB)
```

- Use helper functions for common operations:
  - `takeFirstOrNull`: Extract first result or null
  - `takeUniqueOrThrow`: Extract unique result or throw

## JSDoc for OpenAPI

Always include JSDoc comments for each route handler with:

```typescript
/**
 * [METHOD] [PATH]
 * 
 * [Description of what the endpoint does]
 * 
 * @params {type} name - Description (for route parameters)
 * @query {type} name - Description (for query string parameters)
 * @body {schema} - Description (for request body)
 * @returns {Promise<NextResponse>} Description of response
 * @throws {NextResponse} status Description of error scenarios
 */
```

## Error Handling

- Use status codes from `stoker/http-status-codes` 
- Use status phrases from `stoker/http-status-phrases`
- Always return proper error responses:

```typescript
// For specific error cases
return NextResponse.json(
  { message: HttpStatusPhrases.NOT_FOUND },
  { status: HttpStatusCodes.NOT_FOUND }
)

// For general server errors
return NextResponse.json(
  { error: "Failed to fetch data" },
  { status: HttpStatusCodes.INTERNAL_SERVER_ERROR }
)
```

- The `createRoute` utility includes global error handling for uncaught exceptions

## Response Formatting

- Use `NextResponse.json()` for returning JSON responses
- Always include appropriate status codes:
  - `200` for successful GET, PATCH, PUT
  - `201` for successful POST with newly created resources
  - `204` for successful DELETE with no content
  - `4xx` for client errors
  - `5xx` for server errors

```typescript
// Success with content
return NextResponse.json(data)

// Created
return NextResponse.json(newResource, { status: 201 })

// No content
return new NextResponse(null, { status: 204 })
```

## Data Processing Patterns

### Pagination

Use the pagination query schema for list endpoints:

```typescript
const { pageSize, page, orderBy, order } = context.query

// Apply pagination in database query
.limit(pageSize)
.offset(page * pageSize)
```

### Filtering & Searching

Use SQL conditions with proper sanitization:

```typescript
.where(
  and(
    search ? like(Table.field, `%${search}%`) : sql`1=1`,
    someFilter ? eq(Table.field, value) : sql`1=1`
  )
)
```

### Sorting

- Create helper functions for handling dynamic sorting:
```typescript
function getOrderDirection(direction: "asc" | "desc") {
  return direction === "desc" ? desc : asc
}

function getColumn(columnName: string): SQLiteColumn {
  return SomeTable[columnName as keyof typeof SomeTable] as SQLiteColumn
}
```

- Apply in queries:
```typescript
.orderBy(getOrderDirection(order)(getColumn(orderBy)))
```

## Durable Object Integration

When working with Durable Objects:

```typescript
// Create/init DO
await env.DO_NAME_RPC.init(id, params)

// Delete DO
await env.DO_NAME_RPC.deleteDo(id)
```

## Security Considerations

- Always validate and sanitize user input
- Use parameterized queries to prevent SQL injection
- Apply proper authorization checks where needed
- Avoid exposing sensitive information in error messages

## Testing

- Write unit tests for API routes
- Test happy paths and error scenarios
- Mock external dependencies like databases and Durable Objects
