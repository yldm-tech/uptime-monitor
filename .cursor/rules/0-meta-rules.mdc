---
description: How to add or edit Cursor rules in our project
globs: 
alwaysApply: false
---
# Cursor Rules Location and Conventions

This document outlines how to add, edit, and categorize Cursor rules within this project.

## How to use in Cursor AI

To get help on how to use this meta rule in Cursor, reference the rule by starting with `@` followed by the rule filename (without the `.mdc` extension). For example:
```
@0-meta-rules.mdc Tell me how to use this rule.
```

To use this meta rule in Cursor to create a new rule or update a new rule, reference it like above and add context for the rule. For example:
```
@0-meta-rules.mdc create a api-routes.mdc rule for how routes should be created based our current project usage. Be sure to include schema validation, stoker usage, cloudflare context, createRoute util, JSDoc for OpenAPI, error handling, caching behavior if needed, tools and frameworks to use, and any other common patterns you notice.
```

This command will:
1. Reference this meta-rule to follow proper rule creation guidelines
2. Create a new rule file named `api-routes.mdc` in the `.cursor/rules/` directory
3. Structure it according to our conventions
4. Include the requested API routing patterns and standards

## Rule Location and Naming
1. Always place rule files in `PROJECT_ROOT/.cursor/rules/`:
    ```
    .cursor/rules/
    ├── 0-meta-rules.mdc
    ├── 1-helper-prd.mdc
    ├── feature-user-profile.mdc
    └── ...
    ```
2. Follow the naming convention:
    - Use kebab-case for filenames.
    - Always use the `.mdc` extension.
    - Use prefixes to indicate the rule type (see Rule Categories below).
    - Make names descriptive of the rule's purpose.

3. Directory structure:
    ```
    PROJECT_ROOT/
    ├── .cursor/
    │   └── rules/
    │       ├── 0-meta-rules.mdc
    │       ├── 1-helper-prd.mdc
    │       ├── feature-login-authentication.mdc
    │       └── ...
    └── ...
    ```

4. Never place rule files:
    - In the project root.
    - In subdirectories outside `.cursor/rules`.
    - In any other location.

## Rule Categories

We use prefixes to categorize rules based on their purpose:

1.  **`0-meta-*` Rules:**
    *   **Purpose:** These rules define *how to create and manage other rules*. They focus on the structure, naming conventions, and processes related to rule management itself.
    *   **Example:** `0-meta-rules.mdc` (this file), `0-meta-features.mdc`.
    *   **Nature:** Generally not codebase-specific; they describe project conventions for using Cursor rules.

2.  **`1-helper-*` Rules:**
    *   **Purpose:** These rules provide general-purpose assistance for tasks like ideation, documentation generation (e.g., PRDs), or applying specific development methodologies.
    *   **Example:** `1-helper-prd.mdc`.
    *   **Nature:** Usually not codebase-specific, though they might reference `@codebase` for context during execution. They aim to assist the developer in broader tasks.

3.  **`feature-*` Rules:** (Described in `0-meta-features.mdc`)
    *   **Purpose:** These rules encapsulate knowledge about specific features within the codebase, linking feature summaries to relevant files (routes, UI components, schemas, etc.).
    *   **Example:** `feature-login-authentication.mdc`.
    *   **Nature:** Highly codebase-specific.

## Rule Structure

Cursor rules generally have the following structure:

```markdown
---
description: Short description of the rule's purpose
globs: optional/path/pattern/**/* # Optional: Limit rule application to specific files/directories
alwaysApply: false # Typically false unless the rule should always be active
---
# Rule Title

Main content explaining the rule with markdown formatting.

1. How to use in Cursor AI
2. Step-by-step instructions
3. Code examples
4. Guidelines
5. Definitions or explanations of concepts
```
